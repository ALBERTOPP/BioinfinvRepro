version()
version
a<--13432:234
a<20
sum(a>20)
a<-1:150
a
a+2
# Sumar 1+1
1+1
# Sumar 1+1
1+1
# Sumar 1+1
1+1
# Crear un objeto con el resultado de sumar 1+1
x<-1+1
# Crear un objeto con el resultado de sumar 1+1
x<-1+1
# Mostrar el valor de x
x
1000+43243
y<-4
x+y
x+y
### Script realizado por Alicia
# Abril 2018
# Este script es una demostración de qué es un script
# Sumar 1+1
1+1
# Crear un objeto con el resultado de sumar 1+1
x<-1+1
# Mostrar el valor de x
x
?summary.aov
1+1
"Hola mundo bonito"
"Temprano"
# Valores lógicos
1<5
2+2==5
# Funciones
?sum
#Vectores
?c
c(5,4,7,8)
sum(1,3,4,5)
x<-c(5,4,7,8)
x[4]
# Ejercicio: crea una variable con el logaritmo
# base 10 de 50 y úmalo a otra variable
# cuyo valor sea = a 5
help("log")
x<-log10(50)
x+y
x<-log10(50)
y<-5
x+y
log(50,10)
log(base=10, x=50)
log(10,50)
1:5
# Ejercicio: suma el número 2 a todos
# los números entre 1 y 150
x<-c(1:150)
x+2
# ¿cuántos nùmeros son mayores a 20
# en el vector -13432:234?
d<--13432:234
length(d[d>20])
sum(d>20)
d>20
d[d>20]
### Vectores
mi.vector<-c(1,2,3,4, NA)
mi.vector
length(mi.vector)
y<-c(mi.vector, 20,3:10)
y
y[5]
y[5:10]
x<-1:5
x
letters
names(x)<-letters[1:5]
x[1:3]
x<-1:3
names(x)<-c("A", "A", "B")
x
x["A"]
anyDuplicated(x)
anyDuplicated(names(x))
duplicated(names(x))
### Logical
1>5
10==0
10!=0
10<=0
x<-1:20
sum(x>15)
x<- "tangana nica"
x
x<-c("tangana nica", "tangana na")
x
x<-c("tangana nica", "tangana na", "2")
x[x=="tangana nica"]
x[x=="tangana"]
x[grep("tangana",x)]
x<-c("Quercus grandifolia", "Quercus laurina", "Quercus rugosa")
x
x<-c(1,2,2,3,2,1,1,1,)
x<-c(1,2,2,3,2,1,1,1)
x
as.factor(x)
x
x<-as.factor(x)
x
meses<-c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April")
meses
meses<-as.factor(meses)
meses
# revisar la ayuda de as.factor para determinar cómo
# crear un factor "ordenado"
meses
# revisar la ayuda de as.factor para determinar cómo
# crear un factor "ordenado"
levels(meses)
# revisar la ayuda de as.factor para determinar cómo
# crear un factor "ordenado"
meses<-c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April")
meses<-factor(meses, levels=c("January","February", "March", "April", "May", "July", "August", "September", "October", "November" , "December"))
meses
meses<-factor(meses, levels=c("January","February", "March", "April",
"October", "November" , "December")
meses<-factor(meses, levels=c("January","February", "March", "April"
"May", "July", "August", "September",
"October", "November" , "December"))
sizes <- ordered(c("small", "large", "large", "small", "medium"))
sizes
sizes <- ordered(sizes, levels = c("small", "medium", "large"))
sizes
# Integers and numerics
x<-1
class(x)
class(meses)
x<-1:3
class(x)
z<-1L
z<-1x
z<-1L
class(x)
class(x)
as.numeric(x)
##### Listas
x<-list(1:3, letters[1:3], is.numeric)
x
x[1:2]
x[1]
x[[1]]
names(x)<-c("numeros", "letters", "fun")
x$letters
x$letters[1]
getwd()
library(viridis)
install.packages("viridis")
library(viridis)
image(volcano, col=viridis(200))
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7/Prac_Uni7/mantel/bin")
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7")
# leemos la base
pew <- read.delim(file = "http://stat405.had.co.nz/data/pew.txt",
header = TRUE, stringsAsFactors = FALSE, check.names = F)
pew
# cargamos el paquete
library(tidyr)
library(plyr)
library(dplyr)
pew_tidy <- gather(data = pew, income, frequency, -religion)
# vemos las primeras líneas de nuestros datos alargados
head(pew_tidy)
# y las últimoas
tail(pew_tidy)
tb <- read.csv("Prac_Uni6/ejemplosgenerales/data/tb.csv")
tb <- read.csv("Prac_Uni7/ejemplosgenerales/data/tb.csv")
head(tb)
tb_long <- gather(tb, demo, n, -iso2, -year, -id, na.rm = TRUE)
head(tb_long)
tb_tidy <- separate(tb_long, demo, c("sex", "age"), 8)
head(tb_tidy)
clima <- read.delim("Prac_Uni7/ejemplosgenerales/data/clima.txt", stringsAsFactors=FALSE)
head(clima)
clima_long <- gather(clima, day, value, d1:d31, na.rm = TRUE)
head(clima_long)
clima_vars <- clima_long %>%
mutate(day = extract_numeric(day), value = value / 10)  %>%
select(id, year, month, day, element, value) %>%
arrange(id, year, month, day)
head(clima_vars)
clima_vars <- clima_long %>%
mutate(day = parse_number(day), value = value / 10)  %>%
select(id, year, month, day, element, value) %>%
arrange(id, year, month, day)
library(readr)
install.packages("readr")
library(readr)
clima_vars <- clima_long %>%
mutate(day = parse_number(day), value = value / 10)  %>%
select(id, year, month, day, element, value) %>%
arrange(id, year, month, day)
head(clima_vars)
clima_tidy <- spread(clima_vars, element, value)
head(clima_tidy)
clima_vars
clear()
cat("\014")
library(viridis)
image(volcano, col=viridis(200))
1+1
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7/Prac_Uni7/mantel/bin")
x<-c(1:1854)
x<-1:1854
class(x)
pew <- read.delim(file = "http://stat405.had.co.nz/data/pew.txt",
header = TRUE, stringsAsFactors = FALSE, check.names = F)
pew
View(pew)
# cargar paquetes
library(tidyr)
library(plyr)
library(dplyr)
library(readr)
### utilizar gather para volver columnas cada variable
help(gather)
### utilizar gather para volver columnas cada variable
pew_tidy<-gather(data=pew, income, frequency, -religion)
View(pew_tidy)
### utilizar gather para volver columnas cada variable
pew_tidy<-gather(data=pew, key=ingresos, value=cantidadebanda, -religion)
View(pew_tidy)
tb <- read.csv("Prac_Uni7/ejemplosgenerales/data/tb.csv")
getwd()
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro")
tb <- read.csv("Prac_Uni7/ejemplosgenerales/data/tb.csv")
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7")
tb <- read.csv("Prac_Uni7/ejemplosgenerales/data/tb.csv")
head(tb)
View(tb)
head(tb)
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro")
head(tb)
tb_tidy<-gather(data=tb, key=genero_edad, value=freq, -id, -iso2, -year, na.rm = TRUE)
View(tb_tidy)
tb_tidy<-gather(data=tb, key=demo, value=n, -c(id, iso2, year), na.rm = TRUE)
View(tb_tidy)
View(tb)
# separate
?separate
# gather para volver las columnas demo una sola col
tb_long<-gather(data=tb, key=demo, value=n, -c(id, iso2, year), na.rm = TRUE)
View(tb_long)
# separate
tb_tidy<-separate(data=tb_long, col=demo, into=c("sex", "age"), sep=8)
View(tb_tidy)
# separate
tb_tidy<-separate(data=tb_long, col=demo, into=c("sexo", "ruquimetro"), sep=8)
View(tb_tidy)
# separate
tb_tidy<-separate(data=tb_long, col=demo, into=c("sex", "age"), sep=8)
# contar hombres y mujeres
table(tb_tidy$sex)
clima <- read.delim("Prac_Uni7/ejemplosgenerales/data/clima.txt", stringsAsFactors=FALSE)
getwd()
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7")
clima <- read.delim("Prac_Uni7/ejemplosgenerales/data/clima.txt", stringsAsFactors=FALSE)
View(clima)
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7")
flights <- read.csv("Prac_Uni7/data/flights.csv")
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7")
flights <- read.csv("Prac_Uni7/data/flights.csv")
flights <- read.csv("Prac_Uni7/ejemplosgenerales/data/flights.csv")
head(flights)
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
df_ej
filter(df_ej, genero == "mujer")
filter(df_ej, estatura > 1.65 & estatura < 1.75)
x > 1
x >= 1
x < 1
x <= 1
x != 1
x == 1
x %in% ("a", "b")
x %in% ("a", "b")
library(dplyr)
flights <- read.csv("Prac_Uni7/ejemplosgenerales/data/flights.csv")
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
df_ej
filter(df_ej, genero == "mujer")
df_ej
filter(df_ej, genero == "mujer")
filter(df_ej, estatura > 1.65 & estatura < 1.75)
df_ej
select(df_ej, genero)
select(df_ej, -genero)
select(df_ej, starts_with("g"))
select(df_ej, contains("g"))
arrange(df_ej, genero)
arrange(df_ej, desc(estatura))
mutate(df_ej, estatura_cm = estatura * 100)
mutate(df_ej, estatura_cm = estatura * 100, estatura_in = estatura_cm * 0.3937)
summarise(df_ej, promedio = mean(estatura))
by_genero <- group_by(df_ej, genero)
by_genero
summarise(by_genero, promedio = mean(estatura))
flights$date_only <- as.Date(flights$date)
flights$date_only
by_date <- group_by(flights, date_only)
no_miss <- filter(by_date, !is.na(dep))
delays <- summarise(no_miss, mean_delay = mean(dep_delay), n = n())
hourly_delay <- flights %>%
filter(!is.na(dep_delay)) %>%
group_by(date_only, hour) %>%
summarise(delay = mean(dep_delay), n = n()) %>%
filter(n > 10)
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
df_ej
detach("package:dplyr", unload=TRUE)
detach("package:readr", unload=TRUE)
detach("package:tidyr", unload=TRUE)
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
df_ej
filter(df_ej, genero == "mujer")
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
df_ej
filter(df_ej, genero == "mujer")
?filter
dplyr::filter(df_ej, genero == "mujer")
