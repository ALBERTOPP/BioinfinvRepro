version()
version
a<--13432:234
a<20
sum(a>20)
a<-1:150
a
a+2
# Sumar 1+1
1+1
# Sumar 1+1
1+1
# Sumar 1+1
1+1
# Crear un objeto con el resultado de sumar 1+1
x<-1+1
# Crear un objeto con el resultado de sumar 1+1
x<-1+1
# Mostrar el valor de x
x
1000+43243
y<-4
x+y
x+y
### Script realizado por Alicia
# Abril 2018
# Este script es una demostración de qué es un script
# Sumar 1+1
1+1
# Crear un objeto con el resultado de sumar 1+1
x<-1+1
# Mostrar el valor de x
x
?summary.aov
1+1
"Hola mundo bonito"
"Temprano"
# Valores lógicos
1<5
2+2==5
# Funciones
?sum
#Vectores
?c
c(5,4,7,8)
sum(1,3,4,5)
x<-c(5,4,7,8)
x[4]
# Ejercicio: crea una variable con el logaritmo
# base 10 de 50 y úmalo a otra variable
# cuyo valor sea = a 5
help("log")
x<-log10(50)
x+y
x<-log10(50)
y<-5
x+y
log(50,10)
log(base=10, x=50)
log(10,50)
1:5
# Ejercicio: suma el número 2 a todos
# los números entre 1 y 150
x<-c(1:150)
x+2
# ¿cuántos nùmeros son mayores a 20
# en el vector -13432:234?
d<--13432:234
length(d[d>20])
sum(d>20)
d>20
d[d>20]
### Vectores
mi.vector<-c(1,2,3,4, NA)
mi.vector
length(mi.vector)
y<-c(mi.vector, 20,3:10)
y
y[5]
y[5:10]
x<-1:5
x
letters
names(x)<-letters[1:5]
x[1:3]
x<-1:3
names(x)<-c("A", "A", "B")
x
x["A"]
anyDuplicated(x)
anyDuplicated(names(x))
duplicated(names(x))
### Logical
1>5
10==0
10!=0
10<=0
x<-1:20
sum(x>15)
x<- "tangana nica"
x
x<-c("tangana nica", "tangana na")
x
x<-c("tangana nica", "tangana na", "2")
x[x=="tangana nica"]
x[x=="tangana"]
x[grep("tangana",x)]
x<-c("Quercus grandifolia", "Quercus laurina", "Quercus rugosa")
x
x<-c(1,2,2,3,2,1,1,1,)
x<-c(1,2,2,3,2,1,1,1)
x
as.factor(x)
x
x<-as.factor(x)
x
meses<-c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April")
meses
meses<-as.factor(meses)
meses
# revisar la ayuda de as.factor para determinar cómo
# crear un factor "ordenado"
meses
# revisar la ayuda de as.factor para determinar cómo
# crear un factor "ordenado"
levels(meses)
# revisar la ayuda de as.factor para determinar cómo
# crear un factor "ordenado"
meses<-c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April")
meses<-factor(meses, levels=c("January","February", "March", "April", "May", "July", "August", "September", "October", "November" , "December"))
meses
meses<-factor(meses, levels=c("January","February", "March", "April",
"October", "November" , "December")
meses<-factor(meses, levels=c("January","February", "March", "April"
"May", "July", "August", "September",
"October", "November" , "December"))
sizes <- ordered(c("small", "large", "large", "small", "medium"))
sizes
sizes <- ordered(sizes, levels = c("small", "medium", "large"))
sizes
# Integers and numerics
x<-1
class(x)
class(meses)
x<-1:3
class(x)
z<-1L
z<-1x
z<-1L
class(x)
class(x)
as.numeric(x)
##### Listas
x<-list(1:3, letters[1:3], is.numeric)
x
x[1:2]
x[1]
x[[1]]
names(x)<-c("numeros", "letters", "fun")
x$letters
x$letters[1]
getwd()
mutate
mutate(df_ej, estatura_cm = estatura * 100)
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
mutate(df_ej, estatura_cm = estatura * 100)
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
mutate(dfej, estatura_cm = estatura * 100)
library(dplyr)
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
mutate(dfej, estatura_cm = estatura * 100)
flights %>%
mutate(date_only=as.Date(date))
largo<-c(10,20,11,15,16,20)
ancho<-c(5,10,7,8,8,11)
plot(x=largo, y=ancho)
head(cars)
plot(cars)
plot(x=carsdist, y=cars$speed)
plot(x=cars$dist, y=cars$speed)
# graficar vel vs distancia
plot(x=cars$speed, y=cars$dist, xlab="Velocidad",
ylab="Distancia", cex=0.5, pch=19)
# graficar vel vs distancia
plot(x=cars$speed, y=cars$dist, xlab="Velocidad",
ylab="Distancia", cex=5, pch=19)
# graficar vel vs distancia
plot(x=cars$speed, y=cars$dist, xlab="Velocidad",
ylab="Distancia", cex=2, pch=19)
# graficar vel vs distancia
plot(x=cars$speed, y=cars$dist, xlab="Velocidad",
ylab="Distancia", cex=.5, pch=17)
# graficar vel vs distancia
plot(x=cars$speed, y=cars$dist, xlab="Velocidad",
ylab="Distancia", cex=.5, pch=8)
hist(islands)
getwd()
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7/Prac_Uni7")
reads<-read.delim("ejemplosgenerales/data/reads.txt")
reads<-read.delim("ejemplosgenerales/data/reads.txt", header=TRUE)
barplot(reads$nreads)
View(reads)
barplot(reads$nreads, col=reads$Library)
palette()
palette(c("magenta", "green3", "cyan"))
palette(c("magenta", "green3", "cyan"))
barplot(reads$nreads, col=reads$Library)
palette(rainbow(7))
barplot(reads$nreads, col=reads$Library)
palette(c("magenta", "green3"))
barplot(reads$nreads, col=reads$Library)
palette(rainbow())
palette(rainbow(7))
barplot(reads$nreads, col=reads$Library)
barplot(reads$nreads, col = reads$Library)
barplot(reads$nreads, col = reads$Library, xlab= "mustras", ylab= numero reads)
barplot(reads$nreads, col = reads$Library, xlab= "mustras", ylab= "numero reads")
legend(x="topleft", legend= levels(reads$Library), fill = palette())
boxplot(reads$nreads)
boxplot(reads$nreads ~ reads$Library)
boxplot(reads$nreads ~ reads$Library, border= palette())
boxplot(reads$nreads ~ reads$Library, border=c("read", "blue", "purple")
boxplot(reads$nreads ~ reads$Library, border=c("red", "blue", "purple")
boxplot(reads$nreads ~ reads$Library, border=c("red", "blue", "purple")
boxplot(reads$nreads ~ reads$Library, border=c("red", "blue", "purple"))
boxplot(reads$nreads ~ reads$Library, border=c("red", "blue", "red"))
boxplot(reads$nreads ~ reads$Library, border=c("red", "blue", "red"), main= "numero de reads")
librery(ggplot2)
library(ggplot2)
head(iris)
ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width))
ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width))
ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width)) +
geom_point()
x<- ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width))
x
x + geom_point()
x<- ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width, col= Species))
x
x + geom_point()
x<- ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width, col= Species, shape= Species)
x + geom_point()
x<- ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width, col= Species, shape= Species)
x + geom_point()
x<- ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width, col= Species, shape=Species)
x + geom_point()
x<- ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width, col= Species, shape=Species))
x
x + geom_point()
x + geom_point(size= 3)
x + geom_point(size= 3)
theme_bw()
r<- x + geom_point(size= 3)
r
r + theme_bw()
r + theme_classic()
r + theme_classic() +facet_grid (Species ~ .)
r + theme_classic() +facet_grid (. ~ Species )
iris
x<- ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width, col= Species, shape=Species))
x
r<- x + geom_point(size= 3)
r
r + theme_classic() +facet_grid (. ~ Species ) + xlab("Longitud de Sépalo")
r + theme_classic() +facet_grid (. ~ Species ) + xlab("Longitud de Sépalo") + ylab("Ancho de Sepalo")
v<- r + theme_classic() +facet_grid (. ~ Species ) + xlab("Longitud de Sépalo") + ylab("Ancho de Sepalo")
v
v + geom_smooth(method = "lm")
r<- x + geom_point(size= 3)
r
r+ geom_smooth(method = "lm")
v + geom_smooth(method = "lm")
x<- ggplot(data= iris, aes(x= Sepal.Length, y= Sepal.Width, col= Species, shape=Species))
x
x + boxplot()
x + geom_boxplot()
x + geom_boxplot()
ggplot( data=reads, aes(x= Library, y=nreads, fill= Library))
ggplot( data=reads, aes(x= Library, y=nreads, fill= Library)) +
geom_boxplot()
1.5e+07+1.5e+07
1e+07
clear
10000000
setwd("~/hubiC/Science/CONABIO/Bellon/Wang_et_al._Demography/Figures")
library(raster)
install.packages("raster")
library(dismo)
library(rgdal)
library(cowplot)
10000000
30000000
(1e+08+1e+07)/2
5.5e+07+5.5e+07
1e+08-1e+07
(1e+08-1e+07)/2
4.5e+07+9e+07
(1e08+1e07)/2
10^(5.5e+07)
5.5e+07+5.5e+07
1.1e+08/5.24e8
100000000
500000000
3*(5.5e+07)
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7/Prac_Uni7/maices/bin")
library(ape)
getwd()
set.seed(5)
tree <- rtree(n=10, rooted = FALSE)
class(tree)
str(tree)
plot.phylo(tree)
plot.phylo(tree, type= "fan")
plot.phylo(tree, type= "cladogram")
tree<- root(tree, outgroup = "t8")
plot(tree)
plot.phylo(tree, type= "radial")
plot.phylo(tree)
tree$tip.label
tree$tip.label
#Cambiar el nombre de los tips labels
tree$tip.label <-c("especie 6", "especie 8", "especie 9",
"especie 1", "especie 2", "especie 3",
"especie 10", "especie 4", "especie 7",
"especie 5")
plot(tree)
spp <- paste("sp", 1:10)
spp
spp <- paste("especie", 1:10)
tree$tip.label <- spp
plot(tree)
tree$tip.label
#Cambiar el nombre de los tips labels
tree$tip.label <-c("especie 6", "especie 8", "especie 9",
"especie 1", "especie 2", "especie 3",
"especie 10", "especie 4", "especie 7",
"especie 5")
plot(tree)
tiplabels(pch=21, col = "black", adj= 1, bg=mycol, cex=2)
#add circulos de colores
mycol<-c("pink", "green", "pink", "green", "grey", "green",
"pink", "green", "green", "green")
tiplabels(pch=21, col = "black", adj= 1, bg=mycol, cex=2)
tiplabels(pch=21, col = "black", adj= 1, bg=mycol, cex=10)
tiplabels(pch=21, col = "black", adj= 1, bg=mycol, cex=1)
plot(tree)
tiplabels(pch=21, col = "black", adj= 0.5, bg=mycol, cex=1)
plot(tree)
tiplabels(pch=21, col = "black", adj= 0.3, bg=mycol, cex=2)
plot(tree, edge.width = 5)
#cargar arbol real
maiz.tree<- read.nexus("../data/tree")
maiz.tree
str(maiz.tree)
plot(maiz.tree, type="unrooted", edge.width = 0.1, cex = 0.5)
fullmat<-read.delim("../meta/maizteocintle_SNP50k_meta_extended.txt")
numcolsneeded<-length(levels(fullmat$Categ.Altitud))
fullmat$Categ.Altitud
palette(rainbow(numcolsneeded))
plot(maiz.tree, type="unrooted", edge.width=0.3, show.tip=FALSE)
tip.label(pch=20, col=fullmat$Categ.Altitud)
tiplabel(pch=20, col=fullmat$Categ.Altitud)
tiplabels(pch=20, col=fullmat$Categ.Altitud)
legend(x= "bottomleft", legend=levels(fullmat$Categ.Altitud), pch=19, col=1:numcolsneeded, cex=1, bty="n")
legend(x= "bottomleft", legend=levels(fullmat$Categ.Altitud), pch=19, col=1:numcolsneeded, cex=1, bty="o")
fullmat$Raza
x<-palette(rainbow)
#Identificar el nùmero de colores que necesitamos
numcolsneeded<-length(levels(fullmat$Raza))
#Definir nuestra paleta de colores
palette(rainbow(numcolsneeded))
#graficar el arbol
plot(maiz.tree, type="unrooted", edge.width=0.3,
show.tip=FALSE)
#agregar los tips
tip.label(pch=20, col=fullmat$Raza)
#agregar los tips
tiplabels(pch=20, col=fullmat$Raza)
library(RColorBrewer)
display.brewer.pal()
display.brewer.all()
fullmat[162:165, 1:4]
plot(maiz.tree, type="unrooted", edge.width=0.3,
show.tip=FALSE)
tiplabels(tip =c(162:165) , pch= 15, col = "black", cex=0.6)
tiplabels(tip =c(1:161) , pch= 20 , col = "green", cex=0.7)
